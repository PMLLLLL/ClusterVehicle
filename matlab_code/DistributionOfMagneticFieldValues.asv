clear;

% 对磁场之的数据进行多种归一化处理查看结果

path = '../2025.3.3 85个数据汇总_标签.xlsx';
DataOper = DataProcessing(path);
% MagneticValues = DataOper.normalizedData(:,4)';

% 将磁场数据按值切分
MagneticValues = DataOper.dataIn(:,4)';
MagneticValues = sort(MagneticValues); %#ok<TRSRT>

figure;
stem(MagneticValues,'.');
title("原始磁场数据");
figure;
histogram(MagneticValues)
title("原始磁场数据直方图");

% 直接归一化处理原始磁场数据
MagneticValuesNormail = Normal(MagneticValues,min(MagneticValues),max(MagneticValues));
figure;
stem(MagneticValuesNormail,'.');
title("原始磁场数据归一化");


%%
% 对数处理
logMagneticValues = log(MagneticValues);
logMagneticValues = Normal(logMagneticValues,min(logMagneticValues),max(logMagneticValues));

figure;
stem(logMagneticValues,'.');
title("对数处理磁场数据");
figure;
histogram(logMagneticValues)
title("对数处理磁场数据直方图");


%%
% Storey1 = [1000 5000];
% Storey2 = [375 1000];
% Storey3 = [0 375];
% 
% Storey1Values = MagneticValues(MagneticValues>=Storey1(1) & MagneticValues<Storey1(2));
% Storey2Values = MagneticValues(MagneticValues>=Storey2(1) & MagneticValues<Storey2(2));
% Storey3Values = MagneticValues(MagneticValues>=Storey3(1) & MagneticValues<Storey3(2));
% 
% Storey1ValuesNormal = 2.2+Normal(Storey1Values,Storey1(1),Storey1(2));
% Storey2ValuesNormal = 1.2+Normal(Storey2Values,Storey2(1),Storey2(2));
% Storey3ValuesNormal = Normal(Storey3Values,Storey3(1),Storey3(2));
% 
% StoreyValuesNormalAll = Normal([Storey3ValuesNormal Storey2ValuesNormal Storey1ValuesNormal], ...
%     min([Storey3ValuesNormal Storey2ValuesNormal Storey1ValuesNormal]), ...
%     max([Storey3ValuesNormal Storey2ValuesNormal Storey1ValuesNormal]));
% 
% figure;
% stem(StoreyValuesNormalAll,'.');
% title("分层处理磁场数据");
% figure;
% histogram(StoreyValuesNormalAll)
% title("分层处理磁场数据直方图");

Storey1 = [1000, 5000];
Storey2 = [375, 1000];
Storey3 = [0, 375];



% 初始化与原数据相同大小的数组
StoreyValuesNormalAll = zeros(size(MagneticValues));

% 分层逻辑索引
mask1 = (MagneticValues >= Storey1(1)) & (MagneticValues < Storey1(2));
mask2 = (MagneticValues >= Storey2(1)) & (MagneticValues < Storey2(2));
mask3 = (MagneticValues >= Storey3(1)) & (MagneticValues < Storey3(2));

% 分层归一化（直接操作数组块）
StoreyValuesNormalAll(mask1) = 2 + (MagneticValues(mask1) - Storey1(1)) / (Storey1(2) - Storey1(1));
StoreyValuesNormalAll(mask2) = 1 + (MagneticValues(mask2) - Storey2(1)) / (Storey2(2) - Storey2(1));
StoreyValuesNormalAll(mask3) = (MagneticValues(mask3) - Storey3(1)) / (Storey3(2) - Storey3(1)); % 0~1.2

StoreyValuesNormalAll = Normal(StoreyValuesNormalAll,min(StoreyValuesNormalAll),max(StoreyValuesNormalAll));
% 可视化（保持原始顺序）
figure;
stem(StoreyValuesNormalAll, '.');
title("分层处理磁场数据（向量化方法）");
figure;
histogram(StoreyValuesNormalAll);
title("分层处理磁场数据直方图（向量化方法）");
Hierarchical = [1000,5000;
                375, 1000;
                0, 375];

StoreyValuesNormalAll1 = HierarchicalNormalization(MagneticValues,Hierarchical);
% 可视化（保持原始顺序）
figure;
stem(StoreyValuesNormalAll1, '.');
title("分层处理1磁场数据（向量化方法）");
figure;
histogram(StoreyValuesNormalAll1);
title("分层处理1磁场数据直方图（向量化方法）");

function results = HierarchicalNormalization(data,Hierarchical)
    for i = 1:length(Hierarchical(1,:))
        % 分层逻辑索引
        mask = (data >= Hierarchical(i,1)) & (data < Hierarchical(i,2));
        data(mask) = i-1+(data(mask) - Hierarchical(i,1)) / (Hierarchical(i,2) - Hierarchical(i,1));
    end
    
    results = (data - min(data))/(max(data) - min(data));
end

function results = Normal(data,min,max)
    results = (data-min)/(max-min);
end