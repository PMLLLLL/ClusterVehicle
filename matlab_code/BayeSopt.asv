clc; clear; close all;

function val = constrainedObjective(weight1,weight2,weight3,weight4,initDirection1,initDirection2,initDirection3, ...
                        refreshDirWei1,refreshDirWei2,scoreWei1,scoreWei2,centerWei1,centerWei2,rad)

    % 原始目标函数值
    originalVal = TargetFunc(X);  % TargetFunc为你原有函数

    % 设置惩罚值（非常大的正数）
    penalty = 1000;  

    % 计算违反约束程度
    c1 = abs(weight1 + weight2 + weight3 + weight4 - 1);
    c2 = abs(initDirection1 + initDirection2 + initDirection3 - 1);
    c3 = abs(scoreWei1 + scoreWei2 - 1);
    c4 = abs(refreshDirWei1 + refreshDirWei2 - 1);
    c5 = abs(centerWei1 + centerWei2 - 1);

    % 如果约束违反超过阈值，加惩罚
    if (c1>1e-4 || c2>1e-6 || c3>1e-6 || c4>1e-6 || c5>1e-6)
        penaltyVal = 1000 + 1000*(c1+c2+c3+c4+c5); % 惩罚项
        val = originalVal + penaltyVal;
    else
        val = originalVal;
    end
end

% 定义目标函数
objectiveFcn = @(X) constrainedObjective(X.weight1, X.weight2, X.weight3, X.weight4, ...
                               X.initDirection1, X.initDirection2, X.initDirection3, ...
                               X.refreshDirWei1,X.refreshDirWei2,X.scoreWei1,X.scoreWei2, ...
                               X.centerWei1,X.centerWei2,X.rad);

% 定义多个优化变量 (搜索空间)
vars = [
    optimizableVariable('weight1', [0.3, 0.43], 'Type', 'real')
    optimizableVariable('weight2', [0.35, 1], 'Type', 'real')
    optimizableVariable('weight3', [0, 0.4], 'Type', 'real')
    optimizableVariable('weight4', [0.3, 0.52], 'Type', 'real')
    optimizableVariable('initDirection1', [0, 1], 'Type', 'real')
    optimizableVariable('initDirection2', [0, 1], 'Type', 'real')
    optimizableVariable('initDirection3', [0, 1], 'Type', 'real')
    optimizableVariable('refreshDirWei1', [0, 1], 'Type', 'real')
    optimizableVariable('refreshDirWei2', [0, 1], 'Type', 'real')
    optimizableVariable('scoreWei1', [0, 1], 'Type', 'real')
    optimizableVariable('scoreWei2', [0, 1], 'Type', 'real')
    optimizableVariable('centerWei1', [0, 1], 'Type', 'real')
    optimizableVariable('centerWei2', [0, 1], 'Type', 'real')
    optimizableVariable('rad', [0, 15], 'Type', 'real')
];

% 循环次数
numRuns = 100;
bestSolutions = cell(numRuns,1);



% 运行贝叶斯优化
for i=1:numRuns
    results = bayesopt(objectiveFcn, vars, ...
        'AcquisitionFunctionName', 'expected-improvement-plus', ...
        'MaxObjectiveEvaluations', 10, ...
        'Verbose', 1);
    
    % 显示最优解
    % bestX = results.XAtMinObjective;
    % bestFval = results.MinObjective;
    bestSolutions{i} = results;

end

% fprintf('最优解:\n');
% disp(bestX);
% fprintf('最小目标函数值: %.4f\n', bestFval);
%% 

figure;
x = [];
y = [];
for i=1:numRuns
    x = [x i];
    y = [y bestSolutions{i}.MinObjective];
    plot(x,y);
end

[resultmax,index] = min(y);

fprintf('最优解:\n');
disp(bestSolutions{index}.XAtMinObjective);
fprintf('最小目标函数值: %.4f\n', resultmax);

%% 
